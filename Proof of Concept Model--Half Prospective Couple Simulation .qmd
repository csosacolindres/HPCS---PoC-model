---
title: "Half-Prospective Couple Simulation: Proof-of-concept model"
format: 
  html:
    page-layout: full
editor: visual
editor_options: 
  chunk_output_type: console
---

# Half-Prospective Couple Simulation: Proof-of-Concept Model

## Background:

As it stands, couple simulation has only been used to reproduce couples that already exist. However, it has been established that people adjust their preferences to more closely match the partners they have already chosen. Therefore, this retrospective approach cannot tell us how well these models *predict* the future choices a person will make. However, while ideal, a fully prospective couple simulation study would require longitudinal sampling from an isolated mating market of single people---a logistically and ethically challenging study design. **I propose a solution to this limitation in the form of a novel study design:** *half*-prospective couple simulation (HPCS), illustrated below.

![](NSF%20Writing/Study%20Design%20Graphic.png){fig-align="center" width="598"}

To assess the viability of this novel study design, I built a proof-of-concept agent-based model that simulates applying an HPCS design to a realistic sample. To create this model, I used a sample of real human data to create simulated agents with realistic mate preferences and traits (e.g., ambitious, caring, etc.). Specifically, I simulated a population of single agents which then choose mates using the resource allocation model (RAM), a reciprocity model that has proven successful in prior research. This provides me a prediction of the kindsof partners each agent *would* choose according to RAM. Next, I generated a second population of single agents and simulated the first population of agents choosing mates within the second population according to either RAM or random mate choice for comparison. Finally, I compared the traits of each agent's first mate choice to the traits of their second mate choice, which simulates comparing participants' actual T2 partners to their predicted T1 partners.

## Model

### Library

```{r library}

library(ggplot2)
library(tidyr)
library(dplyr)
library(ggsignif)

```

### Human Data

```{r humanData}

# Load in the human data for parameterizing agents
hdata <- read.csv("CAREER1 PROCESSED Data 01172020 104258.csv")

# Remove unnecessary columns from the human data
hdata <- hdata[, c(1, 3:10, 235:250, 345:360)]

# Make sure there's no missing information
hdata <- hdata[complete.cases(hdata[, c(10:25, 26:41)]), ]

```

### Parameters

```{r parameters}

# The population size 
popsize <- 100

# The number of model loops I want to run
partSimLoops <- 30
  
```

### Custom Functions

```{r agentGeneration}

# Create the agents: 
agentGenerate <- function(popsize, sex, data) {
  #Generate agents with trait and preferences by resampling from the human data
  agents <- apply(data[, c(10:25, 26:41)], 2, function(x)
    sample(x, popsize, replace = T))
  
  #Standardize ratings
  agents <- t(apply(agents, 2, scale))
  
  #Create a copy of the human dataframe including just the required variables
  hdata1 <- data[, as.numeric(c(10:25, 26:41))]
  
  #Calculates the correlation matrix for traits and preferences in the real data
  hdata1cor <- cor(hdata1)
  
  #Computes the Cholesky decomposition of this matrix
  #This will impose a realistic covariance matrix on the simulated data
  hdata1chol <- t(chol(hdata1cor, pivot = T))
  
  #Multiplies the scaled agent data by the Cholesky decomposition
  #This imposes approximately the correct covariance matrix
  agents <- t(hdata1chol %*% agents)
  
  #Add the mean of each variable to the simulated data to re-center data
  agents <-
    sapply(1:ncol(agents), function(x)
      (sd(hdata1[, x]) * agents[, x]) + mean(hdata1[, x]))
  
  
  #Truncate rated variables to the true mini and max found in the human data
  agents <- sapply(1:ncol(agents), function(x)
    ifelse(agents[, x] > max(hdata1[, x]), max(hdata1[, x]), agents[, x]))
  
  agents <- sapply(1:ncol(agents), function(x)
    ifelse(agents[, x] < min(hdata1[, x]), min(hdata1[, x]), agents[, x]))
  
  #Names variables appropriately
  colnames(agents) <- colnames(hdata1)
  
  return(as.data.frame(cbind(sex, agents)))
}

```

```{r mateValueCalculation}

mvcalc <- function(ideal, traits) {
  #ideal is ideal preferences
  #traits is actual trait values
  
  #Calculates the Euclidean distance between the agent's preferences and each mate's traits
  #Transforms this distance such that positive values are more attractive by multiplying by -1 and
  #adding 1 plus the maximum possible Euclidean distance
  mv <- apply(traits, 1, function(x)
    10 * (-1 * (dist(rbind(
      ideal, x
    ))) + sqrt(10 ^ 2 * 16)) / sqrt(10 ^ 2 * 16))
  
  
  return(mv)
  
}



```

```{r similarityCalculation}

### Calculates similarities betweeen pp and sc partners using the euclidean distance formula
simCalc <- function(ppPartner, scPartner, pp, sc) {
  sim <- 0
  
  # if there are no NA values in ppPartner, take the distance between partners. 
  if (!is.na(ppPartner)) {
    sim <- (-1 * (dist(rbind(pp[pp$PIN == ppPartner, 18:33],
                             sc[sc$PIN == scPartner, 18:33]))) +
              sqrt(10 ^ 2 * 16)) / sqrt(10 ^ 2 * 16)
    
  }
  return(sim)
}




### T2 and T1 Partner Similarity ###
partnerSimilarity <- function(pp, sc, random = F) {
  # Find which sc PINs are the same as pp PINs (this happens with sc populations by primary x secondary & secondary x primary combos) 
  scRepeat <- sc[sc$PIN %in% pp$PIN,]
  
  # Create a vector the size of the number of rows there are of the number of repeat PINs (scRepeat)
  partnerSim <- rep(0, nrow(scRepeat))
  
  # loop the number of repeat PINs that there are. 
  for (p in 1:nrow(scRepeat)) {
    # the standard protocal: 
    # if "random" in the partnerSimilarity function is FALSE: 
    if (random == F) {
      
      # loop through scRepeat's modelguesses in the number of times there are repeat PINs and call that scRepeatPartner
      scRepeatPartner <- scRepeat$modelguess[p]
      
      # However, if "random" == T, scRepeat's modelguess will be a random person the same sex as scRepeat. 
    } else {
      # For the p value calculation
      scRepeatPartner <-
        scRepeat$modelguess[sample((1:nrow(scRepeat))[scRepeat$sex == scRepeat$sex[p]], 1)]
      
    }
    # define ppPartner as the primary populations modelguess
    ppPartner <- pp$modelguess[pp$PIN == scRepeat$PIN[p]]
    
    # take the similarity calculation between ppPartner and scRepeat partner. 
    partnerSim[p] <- simCalc(ppPartner, scRepeatPartner, pp, sc)
    
  }
  return(partnerSim)
}



```

```{r improvedSampling}

### Improved Sampling ###
#A sample function that will return a single scalar if given it
resample <- function(x, ...) {
  if (length(x) == 1)
    x
  else
    sample(x, ...)
} 
```

```{r mateChoice}

#Mate Choice#
matechoice <- function(females, males, mca = "ram") {
  ######Computing Attraction######
  #mvcalc <- function(ideal, min, max, imp, rank, traits, type = "euc", power=2)
  
  # Males #
  #Calculate how attracted each male is to each female
  maleattmatrix <- t(apply(males, 1, function(q)
    mvcalc(as.numeric(q[2:17]),
           females[, c(18:33)])))
  
  colnames(maleattmatrix) <- females$PIN
  rownames(maleattmatrix) <- males$PIN
  
  
  # Females #
  #Calculate how attracted each female is to each male
  femaleattmatrix <- t(apply(females, 1, function(q)
    mvcalc(as.numeric(q[2:17]),
           males[, c(18:33)])))
  
  colnames(femaleattmatrix) <- males$PIN
  rownames(femaleattmatrix) <- females$PIN
  
  
  
  
  
  
  
  
  ###### Mate Choice ######
  if (mca == "gsa") {
    #A blank dataframe for storing the paired couples
    pairs <- matrix(, 1, (ncol(males) + ncol(females)))
    pairs <- as.data.frame(pairs)
    
    #Name the pairs dataframe for cbinding
    colnames(pairs) <- c(colnames(females), colnames(males))
    
    #A vector of male agents' partners
    mpartner <- matrix(0, nrow(males), 1)
    
    #A vector of female agents' partners
    fpartner <- matrix(0, nrow(females), 1)
    
    #A matrix of females have already rejected each male
    mrejected <- matrix(0, nrow(males), nrow(females))
    
    
    #Loops as long as some male is still unpaired
    while (sum(mpartner == 0, na.rm = T) > 0) {
      #Selects the first unpaired male
      focalmale <- which(mpartner == 0)[1]
      
      #Pulls out his attractions
      focalmaleatts <- maleattmatrix[focalmale,]
      
      #Determines which females have already rejected him
      focalmalerejections <- mrejected[focalmale,]
      
      #If there is still a female left who has not rejected the focal male...
      if (sum(focalmalerejections) < nrow(females)) {
        #Sets the attractiveness of each female who has rejected the focal male to 0
        focalmaleatts[focalmalerejections == 1] <- 0
        
        #Determines which of the remaining females he is most attracted to
        femalechosen <-
          which(focalmaleatts == max(focalmaleatts))[1]
        
        #If she is single...
        if (fpartner[femalechosen] == 0) {
          #She provisionally pairs with him
          fpartner[femalechosen] <- focalmale
          
          #And he provisionally pairs with her
          mpartner[focalmale] <- femalechosen
          
          #If the chosen female is not single, she compares the attractiveness of the focal male to her current partner...
        } else if (femaleattmatrix[femalechosen, focalmale] >
                   femaleattmatrix[femalechosen, fpartner[femalechosen]]) {
          #If the focal male is more attractive to the chosen female than her current partner...
          
          #The chosen female rejects her current partner
          mrejected[fpartner[femalechosen], femalechosen] <- 1
          
          #And he becomes single
          mpartner[fpartner[femalechosen]] <- 0
          
          #And the focal male and the chosen female provisionally pair
          mpartner[focalmale] <- femalechosen
          fpartner[femalechosen] <- focalmale
        } else {
          #If the focal male is not more attractive to the chosen female than her current partner, the chosen female rejects the focal male
          mrejected[focalmale, femalechosen] <- 1
        }
      } else {
        #If there is no female who has yet to reject the male, have him abandon search
        mpartner[focalmale] <- NA
      }
    }
    
    mpartner <- mpartner[is.na(mpartner) == F]
    
    #Loop through males' choices
    for (p in 1:length(mpartner)) {
      #Pair each male with his chosen female
      pairs <-
        rbind(pairs, cbind(females[mpartner[p],], males[p,]))
    }
    
    #Remove the row of NAs from the pairs dataframe
    pairs <- pairs[-1,]
    
    
    #Determine the PINs of all guessed pairs
    modelrels <-
      data.frame("females" = pairs[, 34], "males" = pairs[, 68])
    
    
    #Store the mate guessed by each model for each agent for females
    females$modelguess <-
      modelrels$males[match(females$PIN, modelrels$females)]
    
    #Do the same for males
    males$modelguess <-
      modelrels$females[match(males$PIN, modelrels$males)]
    
    
    #Put the data back together
    data2 <- rbind(females, males)
    
  }
  
  
  
  
  
  
  
  
  
  if (mca == "ram") {
    #A blank dataframe for storing the paired couples
    pairs <- matrix(NA, 1, (ncol(males) + ncol(females)))
    pairs <- as.data.frame(pairs)
    
    #Name the pairs dataframe for cbinding
    colnames(pairs) <- c(colnames(females), colnames(males))
    
    #Remove the row of NAs from the pairs dataframe
    pairs <- pairs[-1, ]
    
    
    while (nrow(pairs) < nrow(pFemales)) {
      #Identify unpaired males and feamles
      singleFemales <- females[!(females$PIN %in% pairs[, 34]),]
      singleMales <- males[!(males$PIN %in% pairs[, 68]),]
      
      if (nrow(singleFemales) > 1) {
        #A matrix for storing how much investment each agent sends to each potential mate
        #Start with how attracted each agent is to each potential mate
        maleinvestprops <-
          maleattmatrix[(males$PIN %in% singleMales$PIN), (females$PIN %in% singleFemales$PIN)]
        femaleinvestprops <-
          femaleattmatrix[(females$PIN %in% singleFemales$PIN), (males$PIN %in% singleMales$PIN)]
        
        maleinvestprops <-
          t(apply(maleinvestprops, 1, function(x)
            x * (10 / sum(x))))
        
        femaleinvestprops <-
          t(apply(femaleinvestprops, 1, function(x)
            x * (10 / sum(x))))
        
        #Loop through 100 timesteps for courtship
        for (c in 1:100) {
          #How much investment each male agent received from each female agent in the previous timestep
          maleinvestpropr <- t(femaleinvestprops)
          
          #How much investment each female agent received from each male agent in the previous timestep
          femaleinvestpropr <- t(maleinvestprops)
          
          #Calculate how much investment each agent will send in this round.
          #Investment after the first round is proportional to the mutual investment in the previous round
          maleinvestprops <- maleinvestprops * maleinvestpropr
          femaleinvestprops <- femaleinvestprops * femaleinvestpropr
          
          maleinvestprops <-
            t(apply(maleinvestprops, 1, function(x)
              x * (10 / sum(x))))
          femaleinvestprops <-
            t(apply(femaleinvestprops, 1, function(x)
              x * (10 / sum(x))))
          
          #Some models can produce NaNs. This just converts these to 0
          maleinvestprops[is.nan(maleinvestprops)] <- 0
          femaleinvestprops[is.nan(femaleinvestprops)] <- 0
        }
        
        #Determine which female each male has chosen
        mchoice <- data.frame("male" = 1:nrow(singleMales))
        mchoice$choice <-
          apply(maleinvestprops, 1, function(x)
            resample(which.max(x), 1))
        
        #Determine which male each female has chosen
        fchoice <- data.frame("female" = 1:nrow(singleFemales))
        fchoice$choice <-
          apply(femaleinvestprops, 1, function(x)
            resample(which.max(x), 1))
        
        #Loop through females' choices
        for (p in 1:nrow(fchoice)) {
          #Determine the male chosen by the current focal female
          chosenmale <- fchoice$choice[p]
          
          #Determine the female chosen by the focal female's choice
          chosenfemale <- mchoice$choice[chosenmale]
          
          #If the chosen female is the focal female...
          if (chosenfemale == p) {
            #Pair the male and female together
            pairs <-
              rbind(pairs, cbind(singleFemales[p,], singleMales[chosenmale,]))
          }
          
          #Otherwise do nothing
          
        }
      } else{
        pairs <- rbind(pairs, cbind(singleFemales, singleMales))
      }
      
    }
    
    #Determine the PINs of all guessed pairs
    modelrels <-
      data.frame("females" = pairs[, 34], "males" = pairs[, 68])
    
    
    #Store the mate guessed by each model for each agent for females
    females$modelguess <-
      modelrels$males[match(females$PIN, modelrels$females)]
    
    #Do the same for males
    males$modelguess <-
      modelrels$females[match(males$PIN, modelrels$males)]
    
    
    #Put the data back together
    data2 <- rbind(females, males)
    
  }
  
  
  
  
  
  
  ## Add random couple sim. match randomly PINs
  if (mca == "random") {
    females$modelguess <- sample(males$PIN)
    
    # I want the males model guess to be the females pin that matches females modelguess indexed in the same order as males pin.
    for (mg in 1:nrow(males)) {
      males$modelguess[mg] <-
        females$PIN[females$modelguess == males$PIN[mg]]
    }
    
    
    data2 <- rbind(females, males)
  }
  
  
  
  
  
  #Compile all the outputs
  output <- data2
  
  return(output)
  
}

```

### Simulation

```{r simulation}

models <- c("random","gsa","ram")

modelMeans <- data.frame("loop" = rep(1:partSimLoops, each = length(models)^2),
                         "primaryModel"=rep(models,times=length(models)),
                         "secondaryModel"=rep(models,each=length(models)),
                         "meanSim" = NA, 
                         "p" = NA)


for(ps in 1:partSimLoops){
  
  ### Generate Primary Population ###
  pMales <- agentGenerate(popsize/2, 1, hdata[hdata$sex == 1,])
  pFemales <- agentGenerate(popsize/2, 0, hdata[hdata$sex == 0,])
  
  #Give each agent a unique PIN
  pMales$PIN <- sample(1:nrow(pMales), nrow(pMales), replace = F)
  pFemales$PIN <-
    sample(nrow(pMales):(nrow(pMales) + nrow(pFemales)), nrow(pFemales), replace =
             F) + 1
  
  ### Generate Secondary Population ###
  sMales <- agentGenerate(popsize/2, 1, hdata[hdata$sex == 1,])
  sFemales <- agentGenerate(popsize/2, 0, hdata[hdata$sex == 0,])
  
  #Give each agent a unique PIN
  sMales$PIN <-
    sample(1:nrow(sMales), nrow(sMales), replace = F) + (popsize * 2) + 1
  sFemales$PIN <-
    sample(nrow(sMales):(nrow(sMales) + nrow(sFemales)), nrow(sFemales), replace =
             F) + (popsize * 2) + 2
  
  
  
  
  
  # Run couple simulation on all the different populations 
  # "lapply" assumes "models <- c(random, gsa, ram)" vector is a list. 
  # "matechoice" populates "models" with data frames (data2 <- rbind(females, males))
  # "function(x)" loops through elements in "models" and fills in "matechoice" "mca=" condition with "random", "gsa", and "ram".
  # This creates a list called "ppPairs" that has "matechoice" dataframes for "random", "gsa", and "ram" mate choice models. 
  ppPairs<-lapply(models,function(x)
    matechoice(pFemales,pMales,mca=x)
    )
  # The elements in the ppPairs list do not have names, so let's name them "random", "gsa", and "ram". 
  names(ppPairs)<-models
  
  # same as above, except this rbinds 2 matechoice dataframes to deal with the ps and sp combinations. 
  scPairs<-lapply(models,function(x)
    rbind(matechoice(pFemales,sMales,x),
          matechoice(sFemales,pMales,x))
    )
  
  names(scPairs)<-models
  
  
  
  #Create a dataframe of primary and secondary model combinations
  modelCombos<-expand.grid(models,models)
  
  for(c in 1:nrow(modelCombos)){
    
    # Pick the primary and secondary models from combo of models. 
    primary<-modelCombos[c,1]
    secondary<-modelCombos[c,2]
    
    # take the means of the partner similarities of the primary model's pp dataframe (where we keep all of agents' data including modelguess) and the secondary model's sc dataframe. Put that into the meanSim column of modelmeans dataframe, when the loop, primary model, and secondary model match the corresponding loop, primary and secondary model. 
    modelMeans$meanSim[modelMeans$loop == ps & 
                         modelMeans$primaryModel==primary & 
                         modelMeans$secondaryModel==secondary] <- 
      mean(partnerSimilarity(ppPairs[[primary]], scPairs[[secondary]]))
    
    
    # do the same thing as ^ but this time compare it to a random distribution of corresponding populations to get the p values. 
    modelMeans$p[modelMeans$loop == ps &
                         modelMeans$primaryModel==primary &
                         modelMeans$secondaryModel==secondary]<-
      mean(
        mean(partnerSimilarity(ppPairs[[primary]],
                                  scPairs[[secondary]])) <=
             sapply(1:10, function(x) 
               mean(partnerSimilarity(ppPairs[[primary]],
                                      scPairs[[secondary]],
                                      random=T))))
    
  }

  
}
```

### Model Data

```{r modelData}

# write.csv(modelMeans, file = paste0("HpcsCmclData", Sys.time(), ".csv"))

mean(modelMeans$p[modelMeans$secondaryModel=="ram" & modelMeans$primaryModel=="ram"] <.05)


```

### Graphs

```{r graphs}

# limit to only RAM and Random 
# change plot data to just include Ram and random 
# fix the range of y axis from .0 to 1 not .8
plotData<-modelMeans[modelMeans$primaryModel=="random"|modelMeans$primaryModel=="ram",]
plotData<-plotData[plotData$secondaryModel=="ram",]
plotData$primaryModel<-factor(plotData$primaryModel,levels=c("random","ram"))

t1<-t.test(plotData$meanSim~plotData$primaryModel)

modelMeansPlot <- ggplot(data = plotData, 
                         aes(x = primaryModel,
                             y = meanSim,
                             fill = primaryModel)) +
  stat_summary(fun = mean,
               geom = "bar",
               position = "dodge") +
  labs(title = "Proof-of-Concept Model Results", 
       x = "Mate Choice Model", 
       y = "Similarity (Chosen vs. Predicted Partner)") +
  theme_minimal(base_size = 15) +
  theme(legend.position="none")+
  scale_fill_manual(values= c("#edae46", "#00798c")) +
  stat_summary(fun.data=mean_cl_normal,position="dodge",geom="errorbar")+
  geom_signif(
    annotation = "***",
    y_position = .85, xmin = 1, xmax = 2,
    tip_length = c(0, 0),size = 0.6,
    textsize = 5) +
  scale_x_discrete(labels = c("Random Prediction","RAM Prediction"))+
  coord_cartesian(ylim=c(.7,.9))


#save plot
ggsave("NSF GRFP POC.jpeg", plot=modelMeansPlot, width=175, height=125, units="mm", path ="/Users/is/Desktop/Proof-of-Concept-Model", scale = 1, dpi=300, limitsize=TRUE)
  
  
```
